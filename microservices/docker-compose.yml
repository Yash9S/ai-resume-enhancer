version: '3.8'

services:
  # PostgreSQL Database (shared)
  database:
    image: postgres:15
    environment:
      POSTGRES_DB: ai_resume_parser_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (caching and job queues)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama (Local AI - Optional)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AI Extraction Service (Python FastAPI)
  ai-extraction-service:
    build: ./ai-extraction-service
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./ai-extraction-service:/app
    restart: unless-stopped

  # Business Logic API (Rails API-only)
  business-api:
    build: ./business-api
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@database:5432/ai_resume_parser_development
      - REDIS_URL=redis://redis:6379
      - AI_EXTRACTION_SERVICE_URL=http://ai-extraction-service:8001
      - RAILS_ENV=development
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-extraction-service:
        condition: service_healthy
    volumes:
      - ./business-api:/app
      - bundle_cache:/usr/local/bundle
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Service (React/Next.js)
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080/cable
    depends_on:
      - business-api
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway (Nginx)
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:80"
    depends_on:
      - business-api
      - ai-extraction-service
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Background Job Worker (for Business API)
  worker:
    build: ./business-api
    command: bundle exec sidekiq
    environment:
      - DATABASE_URL=postgresql://postgres:password@database:5432/ai_resume_parser_development
      - REDIS_URL=redis://redis:6379
      - AI_EXTRACTION_SERVICE_URL=http://ai-extraction-service:8001
      - RAILS_ENV=development
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-extraction-service:
        condition: service_healthy
    volumes:
      - ./business-api:/app
      - bundle_cache:/usr/local/bundle
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  bundle_cache:
  node_modules:

networks:
  default:
    driver: bridge