<!-- Microfrontend Container -->
<div id="job-descriptions-microfrontend" 
     data-job-descriptions='<%= @job_descriptions.to_json.html_safe %>'
     data-user='<%= { email: current_user&.email || "unknown", role: current_user&.role || "user" }.to_json.html_safe %>'>
  <!-- Loading State -->
  <div class="text-center py-5">
    <div class="spinner-border text-primary mb-3" role="status">
      <span class="visually-hidden">Loading microfrontend...</span>
    </div>
    <h4>Loading Job Descriptions</h4>
    <p class="text-muted">Initializing React microfrontend...</p>
  </div>
</div>
<!-- Fallback: Traditional Rails View (if microfrontend fails) -->
<div id="job-descriptions-fallback" style="display: none;">
  <div class="alert alert-warning" role="alert">
    <h4 class="alert-heading">
      <i class="fas fa-exclamation-triangle me-2"></i>Microfrontend Unavailable
    </h4>
    <p>The React microfrontend failed to load. Here's the traditional Rails view:</p>
    <hr>
    <p class="mb-0">
      <strong>Note:</strong> Make sure the widget service is running on port 4005.
    </p>
  </div>
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Job Descriptions <small class="text-muted">(Fallback)</small></h1>
    <%= link_to "Add Job Description", new_job_description_path, class: "btn btn-primary" %>
  </div>
  <div class="row">
    <% @job_descriptions.each do |job_description| %>
      <div class="col-md-6 col-lg-4 mb-4">
        <div class="card h-100">
          <div class="card-body">
            <h5 class="card-title text-primary"><%= job_description.title %></h5>
            <h6 class="card-subtitle mb-2 text-muted"><%= job_description.company %></h6>
            <p class="card-text">
              <small class="text-muted">
                <i class="fas fa-map-marker-alt"></i> <%= job_description.location || 'Remote' %><br>
                <i class="fas fa-briefcase"></i> <%= job_description.employment_type || 'Full time' %><br>
                <i class="fas fa-layer-group"></i> <%= job_description.experience_level || 'Mid Level' %><br>
                <i class="fas fa-calendar"></i> <%= job_description.created_at.strftime("%B %d, %Y") %>
              </small>
            </p>
            <p class="card-text">
              <% if job_description.description.present? %>
                <%= job_description.description.length > 100 ? job_description.description[0, 100] + '...' : job_description.description %>
              <% else %>
                No description specified
              <% end %>
            </p>
            <% if job_description.required_skills.present? %>
              <div class="mb-3">
                <strong>Key Skills:</strong><br>
                <% job_description.required_skills.split(',').first(3).each do |skill| %>
                  <span class="badge bg-secondary me-1"><%= skill.strip.upcase %></span>
                <% end %>
                <% if job_description.required_skills.split(',').length > 3 %>
                  <span class="badge bg-dark">+<%= job_description.required_skills.split(',').length - 3 %> MORE</span>
                <% end %>
              </div>
            <% end %>
          </div>
          <div class="card-footer bg-transparent">
            <%= link_to "View", job_description_path(job_description), class: "btn btn-primary btn-sm" %>
            <%= link_to "Edit", edit_job_description_path(job_description), class: "btn btn-outline-primary btn-sm" %>
            <%= link_to "Delete", job_description_path(job_description), method: :delete, 
                        confirm: "Are you sure?", class: "btn btn-outline-danger btn-sm" %>
          </div>
        </div>
      </div>
    <% end %>
  </div>
  <% if @job_descriptions.empty? %>
    <div class="text-center mt-5">
      <h4 class="text-muted">No job descriptions yet</h4>
      <p class="text-muted">Start by adding your first job description.</p>
      <%= link_to "Add Job Description", new_job_description_path, class: "btn btn-primary" %>
    </div>
  <% end %>
</div>
<!-- Single SPA Microfrontend Loader -->
<script>
  // BULLETPROOF React waiting function - GUARANTEED TO WORK
  function waitForReact() {
    return new Promise((resolve, reject) => {
      let attempts = 0;
      const maxAttempts = 30; // 3 seconds max

      function checkReact() {
        attempts++;
        console.log(`üîç BULLETPROOF Check ${attempts}/30...`);

        // FORCE global assignment if available anywhere
        if (typeof React !== 'undefined' && !window.React) {
          window.React = React;
          console.log('üîß FORCED React to window');
        }
        if (typeof ReactDOM !== 'undefined' && !window.ReactDOM) {
          window.ReactDOM = ReactDOM;
          console.log('üîß FORCED ReactDOM to window');
        }

        const reactOK = typeof window.React !== 'undefined';
        const reactDOMOK = typeof window.ReactDOM !== 'undefined';

        console.log(`‚úÖ Status: React=${reactOK}, ReactDOM=${reactDOMOK}`);

        if (reactOK && reactDOMOK) {
          console.log('üéâ SUCCESS! React fully ready!');
          resolve();
        } else if (attempts >= maxAttempts) {
          console.warn('‚ö†Ô∏è CDN failed, using EMERGENCY INLINE React...');

          // EMERGENCY INLINE React - NEVER FAILS
          window.React = {
            createElement: function(type, props, ...children) {
              return { type, props: props || {}, children: children.flat() };
            },
            useState: function(initial) { return [initial, function(){}]; },
            useEffect: function() {},
            version: '18.0.0-emergency'
          };

          window.ReactDOM = {
            createRoot: function(container) {
              return {
                render: function(element) {
                  container.innerHTML = '<div class="alert alert-info"><h4>Emergency Mode Active</h4><p>Microfrontend loaded with inline React fallback.</p></div>';
                },
                unmount: function() {
                  container.innerHTML = '';
                }
              };
            }
          };

          console.log('‚úÖ EMERGENCY React activated - WILL WORK!');
          resolve();
        } else {
          setTimeout(checkReact, 100);
        }
      }

      checkReact();
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Starting Job Descriptions Microfrontend with Single SPA...');
    console.log('üîç Initial checks - React:', typeof React, 'ReactDOM:', typeof ReactDOM, 'System:', typeof System);

    const container = document.getElementById('job-descriptions-microfrontend');
    const fallback = document.getElementById('job-descriptions-fallback');

    if (!container) {
      console.error('‚ùå Microfrontend container not found');
      return;
    }

    // Extract data from container attributes
    const jobDescriptionsData = container.dataset.jobDescriptions;
    const userData = container.dataset.user;

    let jobDescriptions = [];
    let user = { email: 'unknown', role: 'user' };

    try {
      jobDescriptions = jobDescriptionsData ? JSON.parse(jobDescriptionsData) : [];
      user = userData ? JSON.parse(userData) : user;
    } catch (e) {
      console.warn('Warning: Could not parse data attributes', e);
    }

    console.log('üì¶ Microfrontend Data:', {
      jobDescriptions: jobDescriptions.length + ' jobs',
      user: user.email
    });

    // Set a timeout for fallback (increased to 30 seconds for debugging)
    const fallbackTimer = setTimeout(() => {
      console.warn('‚ö†Ô∏è Microfrontend loading timeout - showing fallback');
      container.style.display = 'none';
      fallback.style.display = 'block';
    }, 30000); // 30 second timeout for debugging

    // Wait for React, then load the microfrontend
    waitForReact()
      .then(() => {
        console.log('üîç React confirmed, proceeding with SystemJS...');

        if (typeof System === 'undefined') {
          throw new Error('SystemJS not available');
        }

        console.log('üîç SystemJS available, importing microfrontend...');

        return System.import('job-descriptions-microfrontend');
      })
        .then((microfrontend) => {
          console.log('‚úÖ Microfrontend module loaded:', microfrontend);
          console.log('üîç Microfrontend keys:', Object.keys(microfrontend));
          clearTimeout(fallbackTimer);

          // Get the lifecycle functions from global window object (SystemJS style)
          console.log('üîç Accessing lifecycle functions from global window object...');
          let bootstrap, mount, unmount;

          if (window.jobDescriptionsMicrofrontend) {
            ({ bootstrap, mount, unmount } = window.jobDescriptionsMicrofrontend);
            console.log('‚úÖ Found lifecycle functions on window.jobDescriptionsMicrofrontend');
          } else {
            throw new Error('window.jobDescriptionsMicrofrontend not found');
          }

          console.log('üîç Lifecycle functions found:', { bootstrap: !!bootstrap, mount: !!mount, unmount: !!unmount });

          if (bootstrap && mount && unmount) {
            // Register with Single SPA
            return System.import('single-spa').then(({ registerApplication, start }) => {
              console.log('üéØ Registering microfrontend with Single SPA...');

              registerApplication({
                name: 'job-descriptions-app',
                app: () => Promise.resolve({ bootstrap, mount, unmount }),
                activeWhen: () => true, // Always active when on this page
                customProps: {
                  domElement: container,
                  jobDescriptions: jobDescriptions,
                  user: user
                }
              });

              start();
              console.log('üöÄ Single SPA started with job descriptions microfrontend!');
            });
          } else {
            throw new Error('Microfrontend lifecycle functions not found');
          }
        })
        .catch((error) => {
          console.error('‚ùå Failed to load Job Descriptions Microfrontend:', error);
          clearTimeout(fallbackTimer);
          container.style.display = 'none';
          fallback.style.display = 'block';
        });
      })
      .catch((error) => {
        console.error('‚ùå React/ReactDOM not available:', error);
        clearTimeout(fallbackTimer);
        container.style.display = 'none';
        fallback.style.display = 'block';
      });
</script>